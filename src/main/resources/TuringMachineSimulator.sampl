class Pair<A, B>(a: A, b: B) {
  fun <A, B> getA(p: Pair<A, B>): A = p.a
  fun <A, B> getB(p: Pair<A, B>): B = p.b
  fun <A, B> create(a: A, b: B): Pair<A, B> = Pair{ a = a; b = b }
}

class Lst<T>(Nil | Cons of Pair<T, Lst<T>>) {

  private fun fromArrayHelper(index: Int, acc: Lst<String>, arr: StringArray): Lst<String> =
    if index == 0 - 1 then acc
    else
      val newAcc = Lst.Cons with (Pair.create(getString(index, arr), acc));
      fromArrayHelper(index - 1, newAcc, arr)

  fun fromArray(arr: StringArray): Lst<String> =
    fromArrayHelper(getStringArrayLength(arr) - 1, Lst.Nil<String>, arr)

  fun stringToCharListHelper(index: Int, acc: Lst<Char>, s: String): Lst<Char> =
    if index == 0 - 1 then acc
    else
      val newAcc = Lst.Cons with (Pair.create(getChar(index, s), acc));
      stringToCharListHelper(index - 1, newAcc, s)

  fun stringToCharList(s: String): Lst<Char> =
    stringToCharListHelper(getLength(s) - 1, Lst.Nil<Char>, s)

  fun <T> itemAtIndex(l: Lst<T>, index: Int): T = match l with
    | Nil -> throw<T> "error"
    | Cons p ->
      if index < 0 then throw<T> "error"
      else if index == 0 then Pair.getA(p)
      else itemAtIndex(Pair.getB(p), index - 1)

  fun <T> replaceItemAtIndex(l: Lst<T>, index: Int, replacement: T): Lst<T> = match l with
    | Nil -> throw<Lst<T>> "error"
    | Cons p ->
      if index < 0 then throw<Lst<T>> "error"
      else if index == 0 then Lst.Cons with (
        Pair.create(replacement, Pair.getB(p))
      )
      else
        Lst.Cons with (Pair.create(
          Pair.getA(p), replaceItemAtIndex(Pair.getB(p), index - 1, replacement)
        ))

  fun <T> find(l: Lst<T>, f: (T) -> Bool): T = match l with
    | Nil -> throw<T> "error"
    | Cons p ->
      val currentItem = Pair.getA(p);
      if f(currentItem) then currentItem else find(Pair.getB(p), f)

  fun <T, R> map(l: Lst<T>, f: (T) -> R): Lst<R> = match l with
    | Nil -> Lst.Nil<R>
    | Cons p ->
      val newValue = f(Pair.getA(p));
      val rest = map(Pair.getB(p), f);
      Lst.Cons with (Pair.create(newValue, rest))

  fun <T, R> foldLeft(l: Lst<T>, acc: R, f: (R, T) -> R): R = match l with
    | Nil -> acc
    | Cons p ->
      val newAcc = f(acc, Pair.getA(p));
      foldLeft(Pair.getB(p), newAcc, f)

  fun <T, R> foldRight(l: Lst<T>, init: R, f: (T, R) -> R): R = match l with
    | Nil -> init
    | Cons p -> f(Pair.getA(p), foldRight(Pair.getB(p), init, f))

  fun <T> forEach(l: Lst<T>, action: (T) -> Unit): Unit = match l with
    | Nil -> ()
    | Cons p ->
      val ignore = action(Pair.getA(p));
      forEach(Pair.getB(p), action)

}

class Direction(Left | Right | Stay) {

  fun fromChar(c: Char): Direction =
    if c == '<' then Direction.Left
    else if c == '>' then Direction.Right
    else if c == '-' then Direction.Stay
    else throw<Direction> "error"

  fun toOffset(d: Direction): Int = match d with
    | Left -> 0 - 1
    | Right -> 1
    | Stay -> 0

}

class TransitionRule(
  fromState: String, seeChar: Char,
  toState: String, direction: Direction, overrideChar: Char
) {

  fun fromString(s: String): TransitionRule =
    val parts = split("_", s);
    val fromState = getString(0, parts);
    val seeChar = getChar(0, getString(1, parts));
    val toState = getString(2, parts);
    val direction = Direction.fromChar(getChar(0, getString(3, parts)));
    val overrideChar = getChar(0, getString(4, parts));
    TransitionRule{
      fromState = fromState; seeChar = seeChar;
      toState = toState; direction = direction; overrideChar = overrideChar
    }

  fun canApply(rule: TransitionRule, fromState: String, seeChar: Char): Bool =
    rule.fromState == fromState && rule.seeChar == seeChar

  fun getToState(rule: TransitionRule): String = rule.toState

  fun getDirection(rule: TransitionRule): Direction = rule.direction

  fun getOverrideChar(rule: TransitionRule): Char = rule.overrideChar

}

class TuringMachine(
  transitions: Lst<TransitionRule>, tape: Lst<Char>,
  currentState: String, currentPosition: Int
) {

  class Result(Yes | No | Halt | StillRunning) {

    fun toString(r: Result): String = match r with
      | Yes -> "YES"
      | No -> "NO"
      | Halt -> "HALT"
      | StillRunning -> "STILL_RUNNING"

    fun isHaltingResult(r: Result): Bool = match r with
      | Yes -> true
      | No -> true
      | Halt -> true
      | StillRunning -> false

  }

  /**
   * Assumption:
   * - Following chars are never in the alphabet: ';', ',', '_', '-', '<', '>'.
   * - "YES", "NO", "HALT" are three special states.
   * - The format is: <COMMA Separated Transition Rules>;<Start State>;<Initial Tape Content>,
   *   where each transition rule has the format:
   *   <Current state>_<Char seen>_<The target state>_<Move direction>_<Char to override>
   */
  fun fromString(s: String): TuringMachine =
    val parts = split(";", s);
    val transitionRuleRawList = Lst.fromArray(split(",", getString(0, parts)));
    val transitionRules = Lst.map(transitionRuleRawList, TransitionRule.fromString);
    val startState = getString(1, parts);
    val initialTapeContent = Lst.stringToCharList(getString(2, parts));
    TuringMachine{
      transitions = transitionRules; tape = initialTapeContent;
      currentState = startState; currentPosition = 0;
    }

  private fun transit(m: TuringMachine): Pair<TuringMachine, Result> =
    val currentChar = Lst.itemAtIndex(m.tape, m.currentPosition);
    val filter = { (r: TransitionRule) ->
      TransitionRule.canApply(r, m.currentState, currentChar)
    };
    val rule = Lst.find(m.transitions, filter);
    val newTape = Lst.replaceItemAtIndex(m.tape, m.currentPosition, rule.overrideChar);
    val newState = rule.toState;
    val newPosition = m.currentPosition + (Direction.toOffset(rule.direction));
    val newTuringMachine = {
      m with tape = newTape; currentState = newState; currentPosition = newPosition
    };
    val result =
      if newState == "YES" then Result.Yes
      else if newState == "NO" then Result.No
      else if newState == "HALT" then Result.Halt
      else Result.StillRunning
    ;
    Pair.create(newTuringMachine, result)

  fun simulate(m: TuringMachine): Pair<TuringMachine, Result> =
    val p = transit(m);
    val turingMachine = Pair.getA(p);
    val result = Pair.getB(p);
    if result == Result.StillRunning then simulate(turingMachine) else p

}

fun main(): Unit =
    val turingMachineString = readLine();
    val turingMachine = TuringMachine.fromString(turingMachineString);
    val simulationResultPair = TuringMachine.simulate(turingMachine);
    val result = Pair.getB(simulationResultPair);
    if TuringMachine.Result.isHaltingResult(result) then
      printlnString(TuringMachine.Result.toString(result))
    else throw<Unit> "ERROR!!!"
